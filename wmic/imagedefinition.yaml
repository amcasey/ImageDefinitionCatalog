$schema: 1.0
name: wmic-cmd-test
image: microsoftwindowsdesktop_windows-ent-cpc_win11-24H2-ent-cpc
tasks:
    - name: powershell
      parameters:
        command: |
          # Check cmdlet availability and search for Microsoft Cloud Managed Desktop Extension

          Write-Host '=== Cmdlet Availability Check ==='

          # Check Get-CimInstance availability
          $cimAvailable = $null -ne (Get-Command Get-CimInstance -ErrorAction SilentlyContinue)
          Write-Host 'Get-CimInstance available: ' $cimAvailable

          # Check Get-WmiObject availability
          $wmiAvailable = $null -ne (Get-Command Get-WmiObject -ErrorAction SilentlyContinue)
          Write-Host 'Get-WmiObject available: ' $wmiAvailable

          Write-Host '`n=== Application Search Results ==='

          # Search using Get-CimInstance if available
          if ($cimAvailable) {
              try {
                  Write-Host 'Searching with Get-CimInstance...'
                  $cimApp = Get-CimInstance -Class Win32_Product -Filter \\\"Name = 'Microsoft Cloud Managed Desktop Extension'\\\" -ErrorAction Stop
                  if ($cimApp) {
                      Write-Host 'Found app via CIM'
                      Write-Host '  Version: ' $cimApp.Version
                      Write-Host '  Install Date: ' $cimApp.InstallDate
                  } else {
                      Write-Host 'app NOT found via CIM'
                  }
              } catch {
                  Write-Host 'Error searching with CIM: ' $($_.Exception.Message)
              }
          } else {
              Write-Host 'Skipping CIM search - cmdlet not available'
          }

          # Search using Get-WmiObject if available
          if ($wmiAvailable) {
              try {
                  Write-Host 'Searching with Get-WmiObject...'
                  $wmiApp = Get-WmiObject -Class Win32_Product -Filter \\\"Name = 'Microsoft Cloud Managed Desktop Extension'\\\" -ErrorAction Stop
                  if ($wmiApp) {
                      Write-Host 'Found app via WMI'
                      Write-Host '  Version: ' $wmiApp.Version
                      Write-Host '  Install Date: ' $wmiApp.InstallDate
                  } else {
                      Write-Host 'app NOT found via WMI'
                  }
              } catch {
                  Write-Host 'Error searching with WMI: ' $($_.Exception.Message)
              }
          } else {
              Write-Host '`nSkipping WMI search - cmdlet not available'
          }

          throw 'Fail so we get logs'
